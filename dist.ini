name    = Geo-OSM-StaticMap
author  = Michael Kröll <pepl@cpan.org>
license = Perl_5
copyright_holder = Michael Kröll
copyright_year   = 2011

[AutoVersion]
major = 0
format = {{ $major }}.1
;format = {{ $major }}.{{ cldr('yyDDD') }}

; -- fetch & generate files
[GatherDir]
[MetaTests]
[PodCoverageTests]
[PodSyntaxTests]
[KwaliteeTests]
[PortabilityTests]
[SynopsisTests]
;[MinimumVersionTests]
[HasVersionTests]
[CheckChangesTests]
[DistManifestTests]
[UnusedVarsTests]
[NoTabsTests]
[EOLTests]
[ReportVersions]
[InlineFilesMARCEL]

; -- remove some files
[PruneCruft]
[PruneFiles]
filenames = dist.ini

[ManifestSkip]

; -- get prereqs
[AutoPrereqs]

; -- gather metadata
[Repository]
[Bugtracker]
[Homepage]

; overrides [Repository] if repository is on github
[GithubMeta]
remote = origin     ; better than [Repository]; sets homepage, too

; -- munge files
[ExtraTests]
[PkgVersion]
[CopyReadmeFromBuild]
[PodWeaver]

; -- dynamic meta-information
[ExecDir]
[ShareDir]
[MetaProvides::Package]

; -- generate meta files
[License]
[MakeMaker]
[MetaYAML]
[MetaJSON]
[ReadmeFromPod]
[InstallGuide]
[Signature]
[Manifest] ; should come last

; -- release
[CheckChangeLog]
; before release
[Git::Check]        ; ensure all files checked in
[CheckPrereqsIndexed]    ; ensure prereqs are on CPAN
[CheckChangesHasContent] ; ensure Changes has been updated
[TestRelease]       ; ensure t/ tests pass
[ConfirmRelease]    ; prompt before uploading

; releaser
[UploadToCPAN]      ; uploads to CPAN
 
; after release
[Git::Commit / Commit_Dirty_Files] ; commit Changes (as released)
 
[Git::Tag]          ; tag repo with custom tag
tag_format = release-%v

; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual
 
[NextRelease]
 
[Git::Commit / Commit_Changes] ; commit Changes (for new dev)

[Git::Push]         ; push repo to remote
push_to = origin

